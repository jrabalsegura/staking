name: Deploy Django Project to AWS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names stakes-app || aws ecr create-repository --repository-name stakes-app

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stakes-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to Hetzner
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: 167.235.145.103
        USER: ubuntu
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stakes-app
        IMAGE_TAG: ${{ github.sha }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        IS_DEVELOPMENT: ${{ secrets.IS_DEVELOPMENT }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} "
          set -e
          echo 'Starting deployment process...'
          
          # Install required packages
          sudo apt-get update
          
          # Install AWS CLI
          if ! command -v aws &> /dev/null; then
            echo 'Installing AWS CLI...'
            cd /tmp
            curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"
            unzip awscliv2.zip
            sudo ./aws/install
            rm -rf aws awscliv2.zip
          fi
          
          # Create .aws directory and configure credentials
          echo 'Configuring AWS credentials...'
          mkdir -p ~/.aws
          echo '[default]' > ~/.aws/credentials
          echo 'aws_access_key_id=${AWS_ACCESS_KEY_ID}' >> ~/.aws/credentials
          echo 'aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}' >> ~/.aws/credentials
          echo 'region=eu-west-1' >> ~/.aws/credentials         

          # Create necessary directories
          mkdir -p /home/ubuntu/sqlite_backup_stakes_manager
          sudo rm -rf /home/ubuntu/staticfiles
          sudo mkdir -p /home/ubuntu/staticfiles
          sudo chown -R www-data:www-data /home/ubuntu/staticfiles
          sudo chmod -R 755 /home/ubuntu/staticfiles

          # Login to ECR
          echo 'Logging into ECR...'
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}

          docker cp stakes-app-container:/app/stakes_manager/db.sqlite3 /home/ubuntu/sqlite_backup_stakes_manager/db.sqlite3.backup || true

          # Stop and remove existing container
          if docker ps -a | grep -q stakes-app-container; then
            docker stop stakes-app-container || true
            docker rm stakes-app-container || true
          fi

          # Prune Docker resources
          docker system prune -af --volumes

          # Pull the image
          docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          # Delete the image from ECR after pulling
          aws ecr batch-delete-image \
            --repository-name ${ECR_REPOSITORY} \
            --image-ids imageTag=${IMAGE_TAG}

          # Create env file
          touch /tmp/.env
          echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" > /tmp/.env
          echo "IS_DEVELOPMENT=${IS_DEVELOPMENT}" >> /tmp/.env

          # Run the new container
          docker run -d --name stakes-app-container \
            --restart always \
            --network host \
            --env-file /tmp/.env \
            ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          if [ -f /home/ubuntu/sqlite_backup_stakes_manager/db.sqlite3.backup ]; then
            docker cp /home/ubuntu/sqlite_backup_stakes_manager/db.sqlite3.backup stakes-app-container:/app/stakes_manager/db.sqlite3
          fi

          # Wait for the container to start
          sleep 5

          # Migrate database if needed after restoring from backup
          docker exec stakes-app-container python stakes_manager/manage.py migrate --noinput

          # Copy collectstatic to staticfiles
          docker cp stakes-app-container:/app/stakes_manager/staticfiles /home/ubuntu
          
          # Clean up
          rm /tmp/.env
          if [ -f /home/ubuntu/sqlite_backup_stakes_manager/db.sqlite3.backup ]; then
            rm /home/ubuntu/sqlite_backup_stakes_manager/db.sqlite3.backup
          fi

          
        "