name: Deploy Django Project to AWS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names stakes-app || aws ecr create-repository --repository-name stakes-app

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stakes-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ec2-18-202-178-232.eu-west-1.compute.amazonaws.com
        USER: ubuntu
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stakes-app
        IMAGE_TAG: ${{ github.sha }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} << EOF
          # Install AWS CLI if not already installed
          if ! command -v aws &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y awscli
          fi
          
          # Configure AWS CLI
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region eu-west-1

          # Login to ECR
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}

          # Pull the image
          docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          # Stop and remove existing container
          docker stop stakes-app-container || true
          docker rm stakes-app-container || true

          # Create a temporary .env file with the secret
          echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" > /tmp/.env

          # Run the new container
          docker run -d --name stakes-app-container \
            --restart unless-stopped \
            -p 8001:8001 \
            --env-file /tmp/.env \
            ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          # Clean up
          rm /tmp/.env
        EOF